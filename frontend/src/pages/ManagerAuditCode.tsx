import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faKey, faSync, faCopy, faShieldAlt, faClock } from '@fortawesome/free-solid-svg-icons';

const ManagerAuditCode: React.FC = () => {
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState('');

  // Expiring code states
  const [code, setCode] = useState<string | null>(null);
  const [expiresAt, setExpiresAt] = useState<string | null>(null);
  const [secondsRemaining, setSecondsRemaining] = useState<number>(0);

  useEffect(() => {
    fetchCurrentExpiringCode();
    setLoading(false);
  }, []);

  // Auto-countdown timer for expiring code
  useEffect(() => {
    if (secondsRemaining > 0) {
      const timer = setInterval(() => {
        setSecondsRemaining(prev => {
          if (prev <= 1) {
            // Code expired! Auto-generate new one
            generateNewExpiringCode(true);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [secondsRemaining]);

  const fetchCurrentExpiringCode = async () => {
    try {
      const response = await api.get('/audit/expiring/current');
      
      if (response.data.code) {
        setCode(response.data.code);
        setExpiresAt(response.data.expires_at);
        setSecondsRemaining(response.data.expires_in_seconds);
      } else {
        // No valid code, generate one
        await generateNewExpiringCode(true);
      }
    } catch (error) {
      console.error('Error fetching expiring audit code:', error);
    }
  };

  const generateNewExpiringCode = async (autoGenerated: boolean = false) => {
    try {
      const response = await api.post('/audit/expiring/generate');
      
      setCode(response.data.code);
      setExpiresAt(response.data.expires_at);
      setSecondsRemaining(response.data.expires_in_seconds);
      
      if (!autoGenerated) {
        setMessage('✅ New audit code generated!');
        setTimeout(() => setMessage(''), 3000);
      }
    } catch (error) {
      setMessage('❌ Failed to generate audit code');
      console.error(error);
    }
  };

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getTimeColor = (): string => {
    if (secondsRemaining > 60) return 'text-green-600';
    if (secondsRemaining > 30) return 'text-orange-600';
    return 'text-red-600';
  };

  if (loading) {
    return <div className="p-6">Loading...</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="mx-6 space-y-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Audit Code (90-Second Expiring)</h1>
          <p className="text-gray-600 mt-1">
            Share this time-limited code with System Administrators when they request audit access
          </p>
        </div>

        {message && (
          <div className={`p-4 rounded-lg ${message.includes('✅') ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'}`}>
            {message}
          </div>
        )}

        {/* Expiring Audit Code */}
        <div className="bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl shadow-lg p-8 border-2 border-purple-200">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="bg-purple-600 text-white p-3 rounded-full">
                  <FontAwesomeIcon icon={faClock} className="text-2xl" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-gray-900">90-Second Expiring Code</h2>
                  <p className="text-sm text-gray-600">Valid for 90 seconds only</p>
                </div>
              </div>
              <button
                onClick={() => generateNewExpiringCode(false)}
                className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition flex items-center gap-2"
              >
                <FontAwesomeIcon icon={faSync} />
                Generate New Code
              </button>
            </div>

            <div className="bg-white rounded-lg p-6 mb-6 border-2 border-purple-300">
              <div className="text-center">
                <p className="text-sm text-gray-600 mb-2">Current Code:</p>
                <div className="text-6xl font-bold text-purple-600 tracking-wider mb-4 font-mono">
                  {code || '------'}
                </div>
                
                {/* Countdown Timer */}
                <div className="flex items-center justify-center gap-4 mb-4">
                  <FontAwesomeIcon icon={faClock} className={`text-2xl ${getTimeColor()}`} />
                  <div className={`text-4xl font-bold font-mono ${getTimeColor()}`}>
                    {formatTime(secondsRemaining)}
                  </div>
                </div>

                {/* Progress Bar */}
                <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                  <div
                    className={`h-full transition-all duration-1000 ${
                      secondsRemaining > 60 ? 'bg-green-600' :
                      secondsRemaining > 30 ? 'bg-orange-600' :
                      'bg-red-600'
                    }`}
                    style={{ width: `${(secondsRemaining / 90) * 100}%` }}
                  />
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  {secondsRemaining > 0 ? 'Expires in' : 'Code expired - generating new one...'}
                </p>
              </div>
            </div>

            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <p className="text-sm text-yellow-800">
                <strong>⚠️ Security Note:</strong> This code expires in 90 seconds. Share it immediately with the System Administrator when they request audit access. The code is single-use and auto-generates when expired.
              </p>
            </div>
          </div>

        {/* Information Card */}
        <div className="bg-white rounded-xl shadow p-6">
          <div className="flex items-start gap-3 mb-4">
            <FontAwesomeIcon icon={faShieldAlt} className="text-blue-600 text-xl mt-1" />
            <div>
              <h3 className="font-semibold text-gray-900 mb-2">
                How Does the Expiring Audit Code Work?
              </h3>
              
              <p className="text-gray-600 text-sm mb-3">
                The expiring audit code is a temporary, time-limited code for enhanced security:
              </p>
              <ul className="list-disc list-inside text-sm text-gray-600 space-y-2">
                <li>Code is generated automatically and expires in 90 seconds</li>
                <li>Share the code with System Administrator when they request access</li>
                <li>After expiry, a new code is auto-generated</li>
                <li>Each code can only be used once</li>
                <li>You can manually generate a new code anytime</li>
                <li>All audit access is logged for your records</li>
              </ul>
            </div>
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mt-4">
            <p className="text-sm text-yellow-800">
              <strong>⚠️ Security Note:</strong> Only share your audit code with authorized System Administrators when required. The expiring code provides enhanced security with time-limited access.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ManagerAuditCode;

