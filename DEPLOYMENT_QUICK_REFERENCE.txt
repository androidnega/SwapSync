================================================================================
                    SWAPSYNC DEPLOYMENT QUICK REFERENCE
                    Vercel (Frontend) + Render (Backend)
================================================================================

üîç BACKEND AUDIT (Render)
================================================================================
Python Version: 3.12.11 (runtime.txt)
Entry Point: backend/main.py ‚Üí main:app
Framework: FastAPI with Uvicorn ASGI server
Health Check: /ping or /health

Start Command:
  uvicorn main:app --host 0.0.0.0 --port $PORT

Required Dependencies: (see requirements.txt)
  - fastapi>=0.115.0
  - uvicorn[standard]>=0.34.0
  - sqlalchemy>=2.0.0
  - psycopg2-binary>=2.9.0  ‚ö†Ô∏è ADD THIS FOR POSTGRESQL
  - python-jose, passlib, pydantic, reportlab, etc.

================================================================================
üé® FRONTEND AUDIT (Vercel)
================================================================================
Framework: React 19.1.1 with Vite
Build Tool: Vite (TypeScript)
Build Command: npm run build
Output Directory: dist
API Config File: frontend/src/services/api.ts

================================================================================
üö® CRITICAL ISSUES TO FIX BEFORE DEPLOYMENT
================================================================================

1. DATABASE PERSISTENCE (MAJOR)
   Problem: SQLite won't persist on Render (ephemeral filesystem)
   Solution: MUST switch to PostgreSQL
   
   Steps:
   a) Add to requirements.txt:
      psycopg2-binary>=2.9.0
   
   b) Update backend/app/core/database.py:
      Remove line: connect_args={"check_same_thread": False}
   
   c) Set DATABASE_URL in Render:
      postgresql://user:pass@host:5432/dbname

2. CORS CONFIGURATION
   Problem: Hardcoded localhost origins
   Solution: Set CORS_ORIGINS environment variable with Vercel URL

3. SMS CONFIG FILE
   Problem: sms_config.json won't persist
   Solution: Use environment variables (already supported)

================================================================================
‚öôÔ∏è RENDER CONFIGURATION (Backend)
================================================================================

Service Type: Web Service
Environment: Python 3
Root Directory: backend

Build Command:
  pip install -r requirements.txt

Start Command:
  uvicorn main:app --host 0.0.0.0 --port $PORT

Health Check Path:
  /ping

Environment Variables (COPY THESE):
  SECRET_KEY=<generate-with-command-below>
  DATABASE_URL=postgresql://user:pass@host:5432/dbname
  CORS_ORIGINS=https://your-app.vercel.app,https://*.vercel.app
  DEBUG=False
  ENVIRONMENT=production
  APP_NAME=SwapSync API
  APP_VERSION=1.0.0
  ALGORITHM=HS256
  ACCESS_TOKEN_EXPIRE_MINUTES=30
  ARKASEL_API_KEY=<your-key>
  ARKASEL_SENDER_ID=SwapSync
  HUBTEL_CLIENT_ID=<optional>
  HUBTEL_CLIENT_SECRET=<optional>
  HUBTEL_SENDER_ID=SwapSync
  DEFAULT_ADMIN_USERNAME=admin
  DEFAULT_ADMIN_EMAIL=admin@swapsync.com
  DEFAULT_ADMIN_PASSWORD=<set-secure-password>

Generate SECRET_KEY:
  python -c "import secrets; print(secrets.token_urlsafe(32))"

================================================================================
‚öôÔ∏è VERCEL CONFIGURATION (Frontend)
================================================================================

Framework Preset: Vite
Root Directory: frontend

Build Command:
  npm run build

Output Directory:
  dist

Install Command:
  npm install

Environment Variables (COPY THIS):
  VITE_API_URL=https://your-backend.onrender.com/api

Create vercel.json in frontend/ directory:
  {
    "buildCommand": "npm run build",
    "outputDirectory": "dist",
    "framework": "vite",
    "rewrites": [
      { "source": "/(.*)", "destination": "/index.html" }
    ]
  }

================================================================================
‚úÖ PRE-DEPLOYMENT CHECKLIST
================================================================================

BACKEND:
  [ ] Generate secure SECRET_KEY
  [ ] Set up PostgreSQL database (Render add-on or Supabase/Neon)
  [ ] Add psycopg2-binary to requirements.txt
  [ ] Update database.py (remove SQLite config)
  [ ] Prepare all environment variables
  [ ] Set DEBUG=False
  [ ] Configure SMS credentials
  [ ] Set secure admin password
  [ ] Test PostgreSQL connection locally

FRONTEND:
  [ ] Create vercel.json in frontend/ directory
  [ ] Test build locally: npm run build
  [ ] Ensure dist/ is in .gitignore
  [ ] Prepare VITE_API_URL variable
  [ ] Test production build: npm run preview

REPOSITORY:
  [ ] Commit all changes
  [ ] Push to GitHub
  [ ] Ensure .env files are in .gitignore
  [ ] Remove sensitive data

================================================================================
üöÄ DEPLOYMENT STEPS
================================================================================

STEP 1: DEPLOY BACKEND TO RENDER
--------------------------------
1. Create PostgreSQL database (Render Dashboard ‚Üí New ‚Üí PostgreSQL)
2. Copy Internal Database URL
3. Create Web Service (Render Dashboard ‚Üí New ‚Üí Web Service)
4. Connect GitHub repository
5. Configure:
   - Name: swapsync-backend
   - Root Directory: backend
   - Runtime: Python 3
   - Build Command: pip install -r requirements.txt
   - Start Command: uvicorn main:app --host 0.0.0.0 --port $PORT
6. Add all environment variables (see above)
7. Set Health Check Path: /ping
8. Click "Create Web Service"
9. Copy backend URL (e.g., https://swapsync-backend.onrender.com)

STEP 2: DEPLOY FRONTEND TO VERCEL
---------------------------------
1. Go to vercel.com ‚Üí Add New Project
2. Import Git repository
3. Configure:
   - Framework Preset: Vite
   - Root Directory: frontend
   - Build Command: npm run build
   - Output Directory: dist
4. Add environment variable:
   - VITE_API_URL = https://your-backend.onrender.com/api
5. Click "Deploy"
6. Copy Vercel URL (e.g., https://swapsync.vercel.app)

STEP 3: UPDATE CORS
------------------
1. Go to Render dashboard
2. Update CORS_ORIGINS environment variable
3. Add: https://swapsync.vercel.app,https://swapsync-*.vercel.app
4. Click "Manual Deploy" ‚Üí "Deploy latest commit"

================================================================================
üß™ POST-DEPLOYMENT TESTING
================================================================================

Test Backend:
  curl https://your-backend.onrender.com/ping
  Visit: https://your-backend.onrender.com/docs

Test Frontend:
  1. Visit Vercel URL
  2. Login with admin credentials
  3. Check browser console for errors
  4. Test all major features

Test Database:
  Login to PostgreSQL and verify tables exist

================================================================================
üîß TROUBLESHOOTING
================================================================================

CORS Errors:
  ‚Üí Add Vercel domain to CORS_ORIGINS
  ‚Üí Include *.vercel.app for preview deployments
  ‚Üí Redeploy backend

Database Connection Error:
  ‚Üí Verify DATABASE_URL is correct
  ‚Üí Check PostgreSQL is running
  ‚Üí Review Render service logs

Module Not Found (psycopg2):
  ‚Üí Add psycopg2-binary>=2.9.0 to requirements.txt
  ‚Üí Trigger manual redeploy

API Connection Error:
  ‚Üí Verify VITE_API_URL is set
  ‚Üí Check backend is running
  ‚Üí Ensure URL includes /api suffix

Build Failures:
  ‚Üí Run npm install locally
  ‚Üí Commit package-lock.json
  ‚Üí Check Node version (18.x or 20.x)

404 on Page Refresh:
  ‚Üí Ensure vercel.json has rewrite rules
  ‚Üí Add catch-all route to /index.html

================================================================================
üîê SECURITY CHECKLIST
================================================================================

  [ ] Use strong, random SECRET_KEY (32+ characters)
  [ ] Set DEBUG=False in production
  [ ] Change default admin password immediately
  [ ] Never commit .env files
  [ ] Use HTTPS only (auto on Render/Vercel)
  [ ] Enable database encryption
  [ ] Set restrictive CORS (specific domains only)
  [ ] Rotate credentials periodically
  [ ] Set up database backups
  [ ] Implement rate limiting

Generate Secure Password:
  python -c "import secrets, string; chars = string.ascii_letters + string.digits + string.punctuation; print(''.join(secrets.choice(chars) for _ in range(32)))"

================================================================================
üìä POSTGRESQL PROVIDERS
================================================================================

Render PostgreSQL (Recommended):
  - Built-in to Render
  - Easy integration
  - Auto-configured DATABASE_URL
  - Cost: Starts free tier

Supabase:
  - Free tier available
  - Web dashboard
  - Get connection string from dashboard
  - URL format: postgresql://user:pass@db.supabase.co:5432/postgres

Neon:
  - Serverless PostgreSQL
  - Free tier available
  - Auto-scaling
  - URL format: postgresql://user:pass@ep-xxx.region.aws.neon.tech/dbname

PlanetScale:
  - MySQL alternative
  - Requires MySQL adapter instead of psycopg2
  - Not recommended for this project (built for PostgreSQL)

================================================================================
üìù USEFUL COMMANDS
================================================================================

Generate SECRET_KEY:
  python -c "import secrets; print(secrets.token_urlsafe(32))"

Test Backend Locally:
  cd backend
  uvicorn main:app --reload

Test Frontend Locally:
  cd frontend
  npm run dev

Build Frontend:
  cd frontend
  npm run build

Preview Production Build:
  cd frontend
  npm run preview

Check Versions:
  python --version
  node --version

Install Dependencies:
  pip install -r requirements.txt
  npm install

================================================================================
üìû RESOURCES
================================================================================

Documentation:
  - Render: https://render.com/docs
  - Vercel: https://vercel.com/docs
  - FastAPI: https://fastapi.tiangolo.com
  - Vite: https://vitejs.dev

Support:
  - Render Support: https://render.com/support
  - Vercel Support: https://vercel.com/support

================================================================================
üéØ QUICK DEPLOYMENT SUMMARY
================================================================================

1. Fix PostgreSQL issue:
   - Add psycopg2-binary to requirements.txt
   - Remove SQLite config from database.py
   - Create PostgreSQL database

2. Deploy Backend (Render):
   - Set all environment variables (especially DATABASE_URL, SECRET_KEY, CORS_ORIGINS)
   - Use health check: /ping
   - Start command: uvicorn main:app --host 0.0.0.0 --port $PORT

3. Deploy Frontend (Vercel):
   - Create vercel.json
   - Set VITE_API_URL to backend URL
   - Framework: Vite, Output: dist

4. Update CORS with Vercel URL

5. Test everything!

================================================================================
                              END OF GUIDE
================================================================================
Last Updated: October 10, 2025
Version: 1.0.0

For detailed information, see DEPLOYMENT_GUIDE.md

